
// qndo nao for um component nao precisa de ser .tsx - pode ser .ts

--------------------------------------------------------------

-- npm install -g expo

-- npx create-expo-app my-new-project --template blank-typescript
-- npx expo start
-- expo install @react-navigation/native
-- expo install react-native-screens react-native-safe-area-context
-- expo install @react-navigation/native-stack
-- npx expo install @react-native-async-storage/async-storage
-- expo install axios

--------------------------------------------------------------

CRIAR O PROJETO

------ npx create-expo-app my-new-project --template blank-typescript
------ npx expo start

------ npx create-expo-app my-new-project
------ npx create-expo-app my-new-project --template

--------------------------------------------------------------

REACT NAVIGATION - CONTROLE DE ROTAS

------ expo install @react-navigation/native
------ expo install react-native-screens react-native-safe-area-context
------ expo install @react-navigation/native-stack

// sempre que usar rotas, o NavigationContainer precisar estar enter elas, sempre no component app.jsx
// import { NavigationContainer } from '@react-navigation/native';

-------------------------------------------------------------

FLUXO DE AUTENTIFICAÇÃO: CONTEXT AUTHENTICATE -- REPENSÁVEL PELAS informações 

// controle de login
// controle de rotas

// context authenticate é global, ele fica envolta da aplicação - nele esta todas as informações


// ASYNC STORAGE : para criar context authenticate e salvar no store do user as informações dele de forma offline

- async-storage é para salvar no store do user as informações dele de forma offline
- import React, {useState, createContext} from "react";        
- createContext para criar o context authenticate

------ npx expo install @react-native-async-storage/async-storage

-------------------------------------------------------------

Bibliotecas úteis

Aqui estão algumas bibliotecas que você pode considerar instalar:

1 - React Navigation: Para navegação entre telas.
2 - Axios: Para fazer requisições HTTP.
3 - React Native Paper: Para componentes de UI.
4 - Formik: Para gerenciamento de formulários.

-------------------------------------------------------------

EXPO

// O Expo é um framework e uma plataforma para desenvolvimento de aplicativos móveis usando React Native. 

// Ele simplifica o processo de criação, teste e publicação de apps, 
// fornecendo uma série de ferramentas e bibliotecas integradas.

// Expo facilita o desenvolvimento em React Native, por isso não é necessário instalar o React Native separadamente. 
// O Expo já inclui o React Native por baixo dos panos.


// Principais características do Expo:

1 - Facilidade de uso: Permite que desenvolvedores iniciantes construam aplicativos sem precisar configurar ambientes nativos complexos.
2 - Componentes prontos: Inclui uma biblioteca de componentes prontos para uso que seguem as diretrizes de design de iOS e Android.
3 - Expo Go: Um aplicativo que permite que você visualize seu projeto em dispositivos móveis sem precisar compilar ou instalar nativamente.
4 - API integrada: Fornece acesso a várias APIs, como câmera, localização, notificações, etc., sem necessidade de configuração adicional.
5 - Desdobramento simplificado: Facilita a publicação e atualização de aplicativos diretamente, sem precisar passar pelo processo tradicional de envio para as lojas de aplicativos.

-------------------------------------------------------------

AXIOS   -> API de requisições HTTP

------ expo install axios

// deixar o backend em start
// para rodar em desenvolvimento precisa ser assim:
// react-native nao deixa usar o localhost http
// digitar no terminal ipconfig
// pegar o ip da maquina - baseURL: 'http://192.168.0.4:3333'
// EM PRODUCAO MUDA

-------------------------------------------------------------


PROVIDER

// Provider é um componente que permite compartilhar dados ou funcionalidades entre diferentes partes da aplicação 
// sem precisar passar essas informações através de props manualmente.

-----------------------------------------------

USE-STATE   - ciclo de vida

// Um hook do React que permite adicionar e gerenciar estado em componentes funcionais. 
// Ele retorna um valor de estado e uma função para atualizá-lo.

// Ele é uma forma simples e eficaz de gerenciar dados que podem mudar ao longo do tempo, como entradas de formulário, 
// contadores e outros valores dinâmicos.

const [estado, setEstado] = useState(valorInicial);

// Componentes:

// estado: A variável que armazena o valor atual do estado.
// setEstado: Uma função que permite atualizar o valor do estado.
// valorInicial: O valor inicial do estado que pode ser um número, string, objeto, array, etc.

-----------------------------------------------

USE-EFFECT  

// - Ele é como um "executor" que roda a função que você passa a ele em momentos específicos

// Um hook que permite realizar efeitos colaterais em componentes, como chamadas de API ou manipulação do DOM. 
// É executado após a renderização do componente e pode ser configurado para rodar em mudanças específicas de estado ou props.

// O array de dependências no useEffect é uma maneira de controlar quando o efeito deve ser executado. 
// Quando você passa um array vazio ([]), o efeito é executado apenas uma vez, após a primeira renderização do componente. 
// Isso é semelhante ao comportamento do método componentDidMount em componentes de classe.

// Se você incluir variáveis no array, o useEffect será executado novamente sempre que qualquer uma dessas variáveis mudar. Por exemplo:

useEffect(() => {

  // Código a ser executado
}, [variavel1, variavel2]);       // Executa quando variavel1 ou variavel2 mudam

-----------------------------------------------

USE-CONTEXT

// useContext é um hook do React que permite acessar valores de um contexto sem precisar passar props manualmente. 
// Ele facilita a comunicação entre componentes em diferentes níveis da árvore de componentes.

-----------------------------------------------

GENERIC

// No TypeScript, os generics (ou genéricos) são uma forma de definir tipos que podem ser usados de forma flexível em funções, 
// classes ou interfaces. 
// O uso de <> permite que você especifique um tipo que será usado em uma determinada estrutura, sem perder a segurança de tipos.

-----------------------------------------------

ESTADOS

// Em componentes funcionais do React, o estado refere-se a dados que podem mudar ao longo do tempo e que 
// influenciam a renderização do componente. O hook useState é utilizado para gerenciar esse estado.

-----------------------------------------------

HOOKS

// Um "hook" no React é uma função que permite que você use recursos de estado e outras funcionalidades do React em componentes funcionais. 
// Hooks foram introduzidos no React 16.8 para tornar a lógica do componente mais reutilizável e acessível.

-----------------------------------------------------------------------

USE-EFFECT

// O useEffect é um hook do React que permite realizar efeitos colaterais em componentes funcionais. 
// Ele é uma ferramenta poderosa para gerenciar tarefas como:

// Requisições de API: Você pode buscar dados de uma API quando o componente é montado ou quando suas dependências mudam.
// Manipulação de eventos: Adicionar ou remover listeners de eventos.
// Interações com o DOM: Fazer alterações diretas no DOM, como animações.
// Timers: Configurar intervalos ou timeouts.

Sintaxe Básica

useEffect(() => {
  // Código do efeito
  return () => {
    // Limpeza (opcional)
  };
}, [dependencias]);

Componentes

// Função do Efeito: O primeiro argumento é uma função que contém o código do efeito.
// Função de Limpeza: Você pode retornar uma função que limpa os efeitos, como remover event listeners ou cancelar requisições.
// Array de Dependências: O segundo argumento é um array que especifica quais variáveis fazem o efeito ser reexecutado. Se esse array estiver vazio ([]), o efeito será executado apenas na montagem do componente.

Exemplos


// Efeito de montagem:

useEffect(() => {
  console.log("Componente montado");
}, []);


// Efeito com dependências:

const [count, setCount] = useState(0);
useEffect(() => {
  console.log(`O contador é: ${count}`);
}, [count]);


// Limpeza de efeitos:

useEffect(() => {
  const timer = setTimeout(() => {
    console.log("Timer!");
  }, 1000);
  return () => clearTimeout(timer); // Limpa o timer ao desmontar
}, []);


Considerações

// O useEffect é chamado após a renderização, o que significa que ele não bloqueia a atualização da interface do usuário.
// Você pode ter múltiplos useEffect em um único componente, cada um gerenciando diferentes efeitos.
// O uso adequado de dependências é crucial para evitar loops de renderização infinita.
// O useEffect é essencial para gerenciar o ciclo de vida em componentes funcionais e ajuda a manter o código limpo e organizado.

// useEffect como uma função que permite executar outras funções ou códigos em resposta a mudanças no estado ou nas 
// propriedades do componente. Aqui está uma explicação mais detalhada:

// Como o useEffect Funciona

// Execução de Funções: O useEffect aceita uma função como seu primeiro argumento. 
// Essa função pode conter qualquer código que você deseje executar, como chamadas a APIs, 
// manipulação de dados, ou atualizações de estado.

// Efeitos Colaterais: Dentro dessa função, você pode chamar outras funções, 
// executar lógica de negócios ou interagir com o DOM. É aqui que os efeitos colaterais realmente entram em ação.

// Reatividade: O useEffect monitora as dependências que você especifica. 
// Quando essas dependências mudam, a função dentro do useEffect é reexecutada. Isso permite que você execute 
// lógica sempre que o estado ou as propriedades relevantes mudam.



useEffect(() => {

  const fetchData = async () => {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    console.log(data); // Exibe os dados no console
  };

  fetchData(); // Chamando a função fetchData

}, []); // Executa apenas uma vez na montagem do componente



useEffect como Executor: Ele é como um "executor" que roda a função que você passa a ele em momentos específicos (por exemplo, 
após a montagem do componente ou quando certas variáveis mudam).

Organização do Código: Isso ajuda a manter seu código organizado, permitindo que você centralize a lógica de 
efeitos colaterais dentro do useEffect, ao invés de espalhá-la por todo o componente.

Portanto, sim, o useEffect pode ser visto como uma função que executa outras funções e códigos com base em condições específicas. Essa capacidade é essencial para gerenciar a 
interação de um componente com o mundo externo e garantir que ele responda adequadamente a mudanças.