
// qndo nao for um component nao precisa de ser .tsx - pode ser .ts

--------------------------------------------------------------

-- npm install -g expo

-- npx create-expo-app my-new-project --template blank-typescript
-- npx expo start
-- expo install @react-navigation/native
-- expo install react-native-screens react-native-safe-area-context
-- expo install @react-navigation/native-stack
-- npx expo install @react-native-async-storage/async-storage
-- expo install axios

--------------------------------------------------------------

CRIAR O PROJETO

------ npx create-expo-app my-new-project --template blank-typescript
------ npx expo start

------ npx create-expo-app my-new-project
------ npx create-expo-app my-new-project --template

--------------------------------------------------------------

REACT NAVIGATION - CONTROLE DE ROTAS

------ expo install @react-navigation/native
------ expo install react-native-screens react-native-safe-area-context
------ expo install @react-navigation/native-stack

// sempre que usar rotas, o NavigationContainer precisar estar enter elas, sempre no component app.jsx
// import { NavigationContainer } from '@react-navigation/native';

-------------------------------------------------------------

FLUXO DE AUTENTIFICAÇÃO: CONTEXT AUTHENTICATE -- REPENSÁVEL PELAS informações 

// controle de login
// controle de rotas

// context authenticate é global, ele fica envolta da aplicação - nele esta todas as informações


// ASYNC STORAGE : para criar context authenticate e salvar no store do user as informações dele de forma offline

- async-storage é para salvar no store do user as informações dele de forma offline
- import React, {useState, createContext} from "react";        
- createContext para criar o context authenticate

------ npx expo install @react-native-async-storage/async-storage

-------------------------------------------------------------

Bibliotecas úteis

Aqui estão algumas bibliotecas que você pode considerar instalar:

1 - React Navigation: Para navegação entre telas.
2 - Axios: Para fazer requisições HTTP.
3 - React Native Paper: Para componentes de UI.
4 - Formik: Para gerenciamento de formulários.

-------------------------------------------------------------

EXPO

// O Expo é um framework e uma plataforma para desenvolvimento de aplicativos móveis usando React Native. 

// Ele simplifica o processo de criação, teste e publicação de apps, 
fornecendo uma série de ferramentas e bibliotecas integradas.

// Expo facilita o desenvolvimento em React Native, por isso não é necessário instalar o React Native separadamente. 
// O Expo já inclui o React Native por baixo dos panos.


// Principais características do Expo:

1 - Facilidade de uso: Permite que desenvolvedores iniciantes construam aplicativos sem precisar configurar ambientes nativos complexos.
2 - Componentes prontos: Inclui uma biblioteca de componentes prontos para uso que seguem as diretrizes de design de iOS e Android.
3 - Expo Go: Um aplicativo que permite que você visualize seu projeto em dispositivos móveis sem precisar compilar ou instalar nativamente.
4 - API integrada: Fornece acesso a várias APIs, como câmera, localização, notificações, etc., sem necessidade de configuração adicional.
5 - Desdobramento simplificado: Facilita a publicação e atualização de aplicativos diretamente, 
sem precisar passar pelo processo tradicional de envio para as lojas de aplicativos.

-------------------------------------------------------------

PROVIDER

// Provider é um componente que permite compartilhar dados ou funcionalidades entre diferentes partes da aplicação 
sem precisar passar essas informações através de props manualmente.

-------------------------------------------------------------

AXIOS   

-> API de requisições HTTP

------ expo install axios

-------------------------------------------------------------